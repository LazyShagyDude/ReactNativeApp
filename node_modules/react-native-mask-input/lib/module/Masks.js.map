{"version":3,"sources":["Masks.ts"],"names":["createNumberMask","BRL_CAR_PLATE","BRL_CNPJ","BRL_CPF","BRL_CPF_CNPJ","text","rawValue","replace","length","BRL_CURRENCY","prefix","separator","delimiter","precision","USA_PHONE","BRL_PHONE","CREDIT_CARD","DATE_DDMMYYYY","cleanText","secondDigitDayMask","charAt","secondDigitMonthMask","DATE_MMDDYYYY","DATE_YYYYMMDD","ZIP_CODE"],"mappings":"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","sourcesContent":["import createNumberMask from './createNumberMask';\r\nimport type { Mask, MaskArray } from './formatWithMask.types';\r\n\r\nconst BRL_CAR_PLATE = [/[a-zA-Z]/, /[a-zA-Z]/, /[a-zA-Z]/, '-', /\\d/, /\\w/, /\\d/, /\\d/];\r\n\r\nconst BRL_CNPJ = [\r\n  /\\d/,\r\n  /\\d/,\r\n  '.',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  '.',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  '/',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  '-',\r\n  /\\d/,\r\n  /\\d/,\r\n];\r\n\r\nconst BRL_CPF = [\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  '.',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  '.',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  '-',\r\n  /\\d/,\r\n  /\\d/,\r\n];\r\n\r\nconst BRL_CPF_CNPJ = (text?: string) => {\r\n  const rawValue = text?.replace(/\\D+/g, '') || '';\r\n  return rawValue.length <= 11 ? BRL_CPF : BRL_CNPJ;\r\n};\r\n\r\nconst BRL_CURRENCY = createNumberMask({\r\n  prefix: ['R', '$', ' '],\r\n  separator: ',',\r\n  delimiter: '.',\r\n  precision: 2,\r\n});\r\n\r\nconst USA_PHONE = [\r\n  `(`,\r\n  /[2-9]/,\r\n  /\\d/,\r\n  /\\d/,\r\n  ')',\r\n  ' ',\r\n  /[2-9]/,\r\n  /\\d/,\r\n  /\\d/,\r\n  '-',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n];\r\n\r\nconst BRL_PHONE = [\r\n  '(',\r\n  /\\d/,\r\n  /\\d/,\r\n  ')',\r\n  ' ',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  '-',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n];\r\n\r\nconst CREDIT_CARD = [\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  ' ',\r\n  [/\\d/],\r\n  [/\\d/],\r\n  [/\\d/],\r\n  [/\\d/],\r\n  ' ',\r\n  [/\\d/],\r\n  [/\\d/],\r\n  [/\\d/],\r\n  [/\\d/],\r\n  ' ',\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n] as MaskArray;\r\n\r\nconst DATE_DDMMYYYY: Mask = (text = '') => {\r\n  const cleanText = text.replace(/\\D+/g, '');\r\n\r\n  let secondDigitDayMask = /\\d/;\r\n\r\n  if (cleanText.charAt(0) === '0') {\r\n    secondDigitDayMask = /[1-9]/;\r\n  }\r\n  if (cleanText.charAt(0) === '3') {\r\n    secondDigitDayMask = /[01]/;\r\n  }\r\n\r\n  let secondDigitMonthMask = /\\d/;\r\n\r\n  if (cleanText.charAt(2) === '0') {\r\n    secondDigitMonthMask = /[1-9]/;\r\n  }\r\n  if (cleanText.charAt(2) === '1') {\r\n    secondDigitMonthMask = /[012]/;\r\n  }\r\n\r\n  return [\r\n    /[0-3]/,\r\n    secondDigitDayMask,\r\n    '/',\r\n    /[0-1]/,\r\n    secondDigitMonthMask,\r\n    '/',\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/,\r\n  ];\r\n};\r\n\r\nconst DATE_MMDDYYYY: Mask = (text = '') => {\r\n  const cleanText = text.replace(/\\D+/g, '');\r\n\r\n  let secondDigitMonthMask = /\\d/;\r\n\r\n  if (cleanText.charAt(0) === '0') {\r\n    secondDigitMonthMask = /[1-9]/;\r\n  }\r\n  if (cleanText.charAt(0) === '1') {\r\n    secondDigitMonthMask = /[012]/;\r\n  }\r\n\r\n  let secondDigitDayMask = /\\d/;\r\n\r\n  if (cleanText.charAt(2) === '0') {\r\n    secondDigitDayMask = /[1-9]/;\r\n  }\r\n  if (cleanText.charAt(2) === '3') {\r\n    secondDigitDayMask = /[01]/;\r\n  }\r\n\r\n  return [\r\n    /[0-1]/,\r\n    secondDigitMonthMask,\r\n    '/',\r\n    /[0-3]/,\r\n    secondDigitDayMask,\r\n    '/',\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/,\r\n  ];\r\n};\r\n\r\nconst DATE_YYYYMMDD: Mask = (text = '') => {\r\n  const cleanText = text.replace(/\\D+/g, '');\r\n\r\n  let secondDigitMonthMask = /\\d/;\r\n\r\n  if (cleanText.charAt(4) === '0') {\r\n    secondDigitMonthMask = /[1-9]/;\r\n  }\r\n  if (cleanText.charAt(4) === '1') {\r\n    secondDigitMonthMask = /[012]/;\r\n  }\r\n\r\n  let secondDigitDayMask = /\\d/;\r\n\r\n  if (cleanText.charAt(6) === '0') {\r\n    secondDigitDayMask = /[1-9]/;\r\n  }\r\n  if (cleanText.charAt(6) === '3') {\r\n    secondDigitDayMask = /[01]/;\r\n  }\r\n\r\n  return [\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/,\r\n    '/',\r\n    /[0-1]/,\r\n    secondDigitMonthMask,\r\n    '/',\r\n    /[0-3]/,\r\n    secondDigitDayMask,\r\n  ];\r\n};\r\n\r\nconst ZIP_CODE = [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/];\r\n\r\nexport default {\r\n  BRL_CAR_PLATE,\r\n  BRL_CNPJ,\r\n  BRL_CPF,\r\n  BRL_CPF_CNPJ,\r\n  BRL_CURRENCY,\r\n  BRL_PHONE,\r\n  USA_PHONE,\r\n  CREDIT_CARD,\r\n  DATE_DDMMYYYY,\r\n  DATE_MMDDYYYY,\r\n  DATE_YYYYMMDD,\r\n  ZIP_CODE,\r\n};\r\n"]}