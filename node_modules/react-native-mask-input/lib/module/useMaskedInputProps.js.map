{"version":3,"sources":["useMaskedInputProps.tsx"],"names":["React","formatWithMask","props","value","mask","onChangeText","placeholderFillCharacter","obfuscationCharacter","showObfuscatedValue","maskAutoComplete","maskArray","useMemo","formattedValueResult","text","maskHasObfuscation","find","maskItem","Array","isArray","isValueObfuscated","handleChangeText","useCallback","textToFormat","masked","length","slice","result","unmasked","obfuscated","defaultPlaceholder","map","maskChar","join","undefined","inputValue","selection","start","end","placeholder"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport formatWithMask from './formatWithMask';\nimport type { UseMaskedInputProps } from './useMaskedInputProps.types';\n\nexport default (props: UseMaskedInputProps) => {\n  const {\n    value,\n    mask,\n    onChangeText,\n    placeholderFillCharacter = '_',\n    obfuscationCharacter,\n    showObfuscatedValue,\n    maskAutoComplete,\n  } = props;\n\n  const maskArray = React.useMemo(\n    () => (typeof mask === 'function' ? mask(value) : mask),\n    [mask, value]\n  );\n\n  const formattedValueResult = React.useMemo(() => {\n    return formatWithMask({ text: value || '', mask, obfuscationCharacter });\n  }, [mask, obfuscationCharacter, value]);\n\n  const maskHasObfuscation = React.useMemo(\n    () => maskArray && !!maskArray.find((maskItem) => Array.isArray(maskItem)),\n    [maskArray]\n  );\n\n  const isValueObfuscated = React.useMemo(\n    () => !!maskHasObfuscation && !!showObfuscatedValue,\n    [maskHasObfuscation, showObfuscatedValue]\n  );\n\n  const handleChangeText = React.useCallback(\n    (text: string) => {\n      let textToFormat = text;\n\n      if (isValueObfuscated) {\n        textToFormat = formattedValueResult.masked || '';\n\n        if (textToFormat.length > text.length) {\n          textToFormat = textToFormat.slice(0, -1);\n        } else if (textToFormat.length < text.length) {\n          textToFormat = textToFormat + text[text.length - 1];\n        }\n      }\n\n      const result = formatWithMask({\n        text: textToFormat,\n        mask,\n        obfuscationCharacter,\n        maskAutoComplete:\n          maskAutoComplete && textToFormat.length > formattedValueResult.masked.length,\n      });\n\n      onChangeText && onChangeText(result.masked, result.unmasked, result.obfuscated);\n    },\n    [\n      isValueObfuscated,\n      mask,\n      obfuscationCharacter,\n      onChangeText,\n      formattedValueResult.masked,\n      maskAutoComplete,\n    ]\n  );\n\n  const defaultPlaceholder = React.useMemo(() => {\n    if (maskArray) {\n      return maskArray\n        .map((maskChar) => {\n          if (typeof maskChar === 'string') {\n            return maskChar;\n          } else {\n            return placeholderFillCharacter;\n          }\n        })\n        .join('');\n    } else {\n      return undefined;\n    }\n  }, [maskArray, placeholderFillCharacter]);\n\n  const inputValue = isValueObfuscated\n    ? formattedValueResult.obfuscated\n    : formattedValueResult.masked;\n\n  return {\n    onChangeText: handleChangeText,\n    value: inputValue,\n    selection: isValueObfuscated\n      ? { start: inputValue.length, end: inputValue.length }\n      : undefined,\n    placeholder: defaultPlaceholder,\n  };\n};\n"]}