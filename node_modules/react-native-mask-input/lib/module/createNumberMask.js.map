{"version":3,"sources":["createNumberMask.ts"],"names":["createNumberMask","props","delimiter","precision","prefix","separator","value","numericValue","replace","mask","split","map","shouldAddSeparatorOnMask","length","splice","amountOfDelimiters","Math","ceil","i","precisionOffset","separatorOffset","thousandOffset","delimiterPosition"],"mappings":"AAKA,eAAe,SAASA,gBAAT,CAA0BC,KAA1B,EAA+D;AAC5E,QAAM;AAAEC,IAAAA,SAAS,GAAG,GAAd;AAAmBC,IAAAA,SAAS,GAAG,CAA/B;AAAkCC,IAAAA,MAAM,GAAG,EAA3C;AAA+CC,IAAAA,SAAS,GAAG;AAA3D,MAAmEJ,KAAK,IAAI,EAAlF;AAEA,SAAQK,KAAD,IAAoB;AACzB,UAAMC,YAAY,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,OAAP,CAAe,MAAf,EAAuB,EAAvB,MAA8B,EAAnD;AAEA,QAAIC,IAAe,GAAGF,YAAY,CAACG,KAAb,CAAmB,EAAnB,EAAuBC,GAAvB,CAA2B,MAAM,IAAjC,CAAtB;AAEA,UAAMC,wBAAwB,GAAGT,SAAS,GAAG,CAAZ,IAAiB,CAAC,CAACE,SAApD;;AAEA,QAAII,IAAI,CAACI,MAAL,GAAcV,SAAd,IAA2BS,wBAA/B,EAAyD;AACvDH,MAAAA,IAAI,CAACK,MAAL,CAAY,CAACX,SAAb,EAAwB,CAAxB,EAA2BE,SAA3B;AACD;;AAED,UAAMU,kBAAkB,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACV,YAAY,CAACM,MAAb,GAAsBV,SAAvB,IAAoC,CAA9C,IAAmD,CAA9E;;AAEA,QAAID,SAAJ,EAAe;AACb,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAApB,EAAwCG,CAAC,EAAzC,EAA6C;AAC3C,cAAMC,eAAe,GAAGhB,SAAxB;AACA,cAAMiB,eAAe,GAAGR,wBAAwB,GAAG,CAAH,GAAO,CAAvD;AACA,cAAMS,cAAc,GAAG,KAAKnB,SAAS,GAAG,CAAH,GAAO,CAArB,CAAvB;AACA,cAAMoB,iBAAiB,GACrB,CAACH,eAAD,GAAmBC,eAAnB,GAAqCF,CAAC,GAAGG,cAAzC,GAA0D,CAD5D;AAGAZ,QAAAA,IAAI,CAACK,MAAL,CAAYQ,iBAAZ,EAA+B,CAA/B,EAAkCpB,SAAlC;AACD;AACF;;AAED,WAAO,CAAC,GAAGE,MAAJ,EAAY,GAAGK,IAAf,CAAP;AACD,GA1BD;AA2BD","sourcesContent":["import type { MaskArray } from './formatWithMask.types';\n\nimport type { Mask } from './formatWithMask.types';\nimport type { CreateNumberMaskProps } from './createNumberMask.types';\n\nexport default function createNumberMask(props?: CreateNumberMaskProps): Mask {\n  const { delimiter = '.', precision = 2, prefix = [], separator = ',' } = props || {};\n\n  return (value?: string) => {\n    const numericValue = value?.replace(/\\D+/g, '') || '';\n\n    let mask: MaskArray = numericValue.split('').map(() => /\\d/);\n\n    const shouldAddSeparatorOnMask = precision > 0 && !!separator;\n\n    if (mask.length > precision && shouldAddSeparatorOnMask) {\n      mask.splice(-precision, 0, separator);\n    }\n\n    const amountOfDelimiters = Math.ceil((numericValue.length - precision) / 3) - 1;\n\n    if (delimiter) {\n      for (let i = 0; i < amountOfDelimiters; i++) {\n        const precisionOffset = precision;\n        const separatorOffset = shouldAddSeparatorOnMask ? 1 : 0;\n        const thousandOffset = 3 + (delimiter ? 1 : 0);\n        const delimiterPosition =\n          -precisionOffset - separatorOffset - i * thousandOffset - 3;\n\n        mask.splice(delimiterPosition, 0, delimiter);\n      }\n    }\n\n    return [...prefix, ...mask];\n  };\n}\n"]}